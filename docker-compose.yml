services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine3.20
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-insightiq}
      POSTGRES_USER: ${POSTGRES_USER:-insightiq_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-insightiq_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U insightiq_user -d insightiq"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    restart: unless-stopped


  # Ollama LLM Server
  ollama:
    image: ollama/ollama:latest
    ports:
      - "127.0.0.1:11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - backend-network
    restart: unless-stopped

  # Whisper ASR
  whisper:
    image: onerahmet/openai-whisper-asr-webservice:latest
    ports:
      - "127.0.0.1:9000:9000"
    volumes:
      - whisper_models:/root/.cache/whisper
    environment:
      - ASR_MODEL=base
      - ASR_ENGINE=openai_whisper
    networks:
      - backend-network
    restart: unless-stopped

  # Go Backend
  agent:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "127.0.0.1:8080:8080"
    security_opt:
      - no-new-privileges:true
    depends_on:
      - postgres
      - ollama
      - whisper
    environment:
      - OLLAMA_URL=${OLLAMA_URL:-http://ollama:11434}
      - WHISPER_URL=${WHISPER_URL:-http://whisper:9000}
      - POSTGRES_URL=${POSTGRES_URL:-postgres://insightiq_user:insightiq_password@postgres:5432/insightiq?sslmode=disable}
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "127.0.0.1:3000:3000"
    security_opt:
      - no-new-privileges:true
    depends_on:
      - agent
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080}
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
  ollama_data:
  whisper_models: